// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// gbacom //
// ------ //

#define gbacom_wrap_target 0
#define gbacom_wrap 15
#define gbacom_pio_version 0

#define gbacom_SC_PIN 1
#define gbacom_SO_PIN 2
#define gbacom_SD_PIN 3

static const uint16_t gbacom_program_instructions[] = {
            //     .wrap_target
    0x2001, //  0: wait   0 gpio, 1                  
    0x2082, //  1: wait   1 gpio, 2                  
    0x2020, //  2: wait   0 pin, 0                   
    0xe82f, //  3: set    x, 15                  [8] 
    0x4601, //  4: in     pins, 1                [6] 
    0x0044, //  5: jmp    x--, 4                     
    0x8020, //  6: push   block                      
    0x80a0, //  7: pull   block                      
    0x2002, //  8: wait   0 gpio, 2                  
    0xe081, //  9: set    pindirs, 1                 
    0xe931, // 10: set    x, 17                  [9] 
    0x00cf, // 11: jmp    pin, 15                    
    0x6501, // 12: out    pins, 1                [5] 
    0x004b, // 13: jmp    x--, 11                    
    0x2082, // 14: wait   1 gpio, 2                  
    0xe080, // 15: set    pindirs, 0                 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program gbacom_program = {
    .instructions = gbacom_program_instructions,
    .length = 16,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x1
#endif
};

static inline pio_sm_config gbacom_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + gbacom_wrap_target, offset + gbacom_wrap);
    return c;
}

void gbacom_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    gpio_init(gbacom_SD_PIN);
    gpio_set_dir(gbacom_SD_PIN, GPIO_IN);
    gpio_pull_up(gbacom_SD_PIN);
    pio_sm_config c = gbacom_program_get_default_config(offset);
    sm_config_set_in_pins(&c, gbacom_SD_PIN);
    sm_config_set_out_pins(&c, gbacom_SD_PIN, 1);
    sm_config_set_set_pins(&c, gbacom_SD_PIN, 1);
    sm_config_set_jmp_pin(&c, gbacom_SC_PIN);
    sm_config_set_clkdiv(&c, div);
    pio_gpio_init(pio, gbacom_SD_PIN);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

